5 + 5
'Ajinkya Deshmukh'
'Hello Ajinkya!!'
5
5 10 20
5
5 \n
for (x in 1:10) {}
for (x in 1:10) {}
for (x in 1:10) { print(x)}
for (y in 1:100){print(y)}
#this is a practice program
'Kya practice krra hai be coding kar'
name <- 'Ajinkya'
name
paste('he is ',name)
var1 <- var2 <- var3 <- 'orange'
var2
var11
var1
var3
library(cluster)
library(class)
library(KernSmooth)
library(Matrix)
library(splines)
library(spatial)
library(rpart)
install.packages("splines2")
gc()
install.packages(c("KernSmooth", "Matrix", "mgcv", "nlme", "spatial", "splines2", "survival"))
install.packages("splines2")
R
Q()
q()
a <- TRUE
b <- FALSE
print(class(a))
print(class(b))
cat("Values of a and b are:", a,b)
num_1 <- 21
print(num_1)
print(class(num_1))
num2 = 12.78995
print(num2)
print(class(num2))
num1 = 12L
print(num1)
print(class(num1))
num1 = 12L
print(num1)
print(class(num1))
char_1 <- "I am using a string"
print(char_1)
print(class(char_1))
"char" -> char2
print(char2)
print(class(char2))
'char' -> char2
print(char2)
print(class(char2))
'char' -> char2
print(char2)
print(class(char2))
complex1 = 5 + 3i
print(complex1)
complex.2 = 3 + 5i
print(complex1 + complex.2)
print(letters)
print(LETTERS)
print(month.abb)
print(month.name)
print(date(today))
print(letters)
print(LETTERS)
print(month.abb)
print(month.name)
print(pi)
install package("packman")
install.packages("pacman")
library(pacman)
p_load(dlookr,
DMwR2, # Data Mining with R functions
GGally, # Pair-wise plots using ggplot2
Hmisc, # Data analysis
palmerpenguins, # Alternative to the Iris dataset
tidyverse) # Data wrangling, manipulation, visualization
data(algae, package = "DMwR2")
algae |> glimpse()
algae$a1 |>
mean()
algae$a1 |>
median()
Mode <- function(x, na.rm=FALSE){}
Mode <- function(x, na.rm=FALSE){if (na.rm) x <-x[!is.na(x)] ux <- unique(x) return (ux[which.max(tabulate(match(x, ux)))])} algae$a2 |> Mode()
Mode <- function(x, na.rm=FALSE){if (na.rm) x <-x[!is.na(x)] ux <- unique(x) return (ux[which.max(tabulate(match(x, ux)))])} algae$a2 |> Mode()
install.packages("pacman") #installing pacman to setup the environment for futher operations
library(pacman)
p_load(dlookr,
DMwR2,              #Used for Data Mining with R functions
GGally,             #Pair-wise plots using ggplot2 to create plots
Hmisc,              #Used for Data Analysis
palmerpenguins,     #Alternative to the Iris Dataset
tidyverse)          #Data wrangling, data manipulation and visualization
data(algae, package = "DMwR2")
algae |> glimpse()
algae$a1 |>
mean()
algae$a1 |>
median()
Mode <- function(x, na.rm=FALSE){
if(na.rm) x<-x[!is.na(x)]
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
algae$a2 |> Mode()
algae |> centralValue()
algae$a1 |> centralValue()       #Numerical variable
algae$speed |> centralValue()
algae$a1 |> var()
algae$a1 |> sd()
algae$a1 |> range()             #Gives both Maximum and Minimum values
algae$a1 |> max()
algae$a1 |> min()               #Gives only Minimum value
algae$a1 |> max()               #Gives only Maximum value
algae$a1 |> IQR()
algae$a1 |> IQR()               #3rd quartile (75%) - 1st quartile (25%)
algae$a1 |> quantile()
# Create a dataset (replace this with your own data)
data <- c(12, 15, 18, 20, 22, 25, 27, 30, 32, 35, 45, 80)
# Calculate the first quartile (Q1)
q1 <- quantile(data, 0.25)
# Calculate the third quartile (Q3)
q3 <- quantile(data, 0.75)
# Calculate the interquartile range (IQR)
iqr <- q3 - q1
# Print the results
cat("First Quartile (Q1):", q1, "\n")
cat("Third Quartile (Q3):", q3, "\n")
cat("Interquartile Range (IQR):", iqr, "\n")
algae$a1 |> IQR()               #3rd quartile (75%) - 1st quartile (25%)
algae$a1 |> IQR()               #3rd quartile (75%) - 1st quartile (25%)
algae$a1 |> quantile()
# Create a dataset (replace this with your own data)
data <- c(12, 15, 18, 20, 22, 25, 27, 30, 32, 35, 45, 80)
# Calculate the median (50th percentile)
median_value <- quantile(data, 0.5)
# Calculate quartiles (Q1, Q2, Q3)
quartiles <- quantile(data, c(0.25, 0.5, 0.75))
# Print the results
cat("Median (50th Percentile):", median_value, "\n")
cat("First Quartile (Q1):", quartiles[1], "\n")
cat("Second Quartile (Q2 - Median):", quartiles[2], "\n")
cat("Third Quartile (Q3):", quartiles[3], "\n")
algae$a1 |> quantile(probs = c(0.2, 0.8)     #specific quantiles provided
algae$a1 |> quantile(probs = c(0.2, 0.8))     #specific quantiles provided
library(purrr)
#Compute the total number of NA values in the dataset
nas <-algae %>%
purrr::map_dbl(~sum(is.na(.))) %>%
sum()
cat("The Dataset contains ", nas, "NA values. "\n)
library(purrr)
#Compute the total number of NA values in the dataset
nas <-algae %>%
purrr::map_dbl(~sum(is.na(.))) %>%
sum()
cat("The Dataset contains ", nas, "NA values. \n")
#Compute the number of incomplete rows in the dataset
incomplete_rows <- algae %>%
summarise_all(~!complete.cases(.)) %>%
nrow()
cat("The dataset contains ", incomplete_rows, "(out of ",
nrow(algae),") incomplete rows. \n")
#Compute the number of incomplete rows in the dataset
incomplete_rows <- algae %>%
summarise_all(~!complete.cases(.)) %>%
nrow()
#Compute the number of incomplete rows in the dataset
incomplete_rows <- algae %>%
summarise_all(~!complete.cases(.)) %>%
nrow()
algae |> summary()
data("penguins")
penguins |> Hmisc::describe()
penguins |> dlookr::describe()
penguins |> dlookr::describe()
algae |>
summarise(avgN03 = mean(N03, na.rm = TRUE),
medA1 = median(a1))
algae |>
summarise(avgNO3 = mean(NO3, na.rm = TRUE),
medA1 = median(a1))
algae |>
select(mxPH:Cl) |>
summarise_all(list(mean, median), na.rm = TRUE)
algae |>
summarise(avgNO3 = mean(NO3, na.rm = TRUE),
medA1 = median(a1))
algae |>
select(a1:a7) |>
summarise_all(funs(var))
algae |>
select(a1:a7) |>
summarise_all(c("min", "max"))
algae |>
select(a1:a7) |>
summarise_all(c("min", "max"))
algae |>
group_by(season, size) |>
summarise(nObs = n(), mA7 = median(a7))
penguins |>
group_by(species) |>
summarise(var = var(bill_length_mm, na.rm = TRUE))
penguins |>
group_by(species) |>
reframe(var = quantile(bill_length_mm, na.rm = TRUE))
penguins |>
group_by(species) |>
reframe(var = quantile(bill_length_mm, na.rm = TRUE))
penguins |>
group_by(species) |>
dlookr::describe(bill_length_mm)
penguins |>
group_by(species) |>
dlookr::describe(bill_length_mm)
penguins |>
group_by(species) |>
dlookr::describe(bill_length_mm)
penguins |>
group_by(species) |>
dlookr::describe(bill_length_mm)
data("iris")
iris
str(iris)
quarto install tinytex
install.packages("tinytex")
install.packages("tinytex")
install.packages(c("askpass", "dplyr", "foreign", "Hmisc", "knitr", "minqa", "RcppArmadillo", "splines2"))
install.packages("TexLive")
data("mtcars")
str(mtcars)
plot.default("mtcars")
data("mtcars")
str(mtcars)
plot("mtcars")
data("mtcars")
str(mtcars)
plot.window(10,10,"mtcars")
data("mtcars")
str(mtcars)
plot(mtcars$disp,mtcars$gear)
plot.window(10,10,"mtcars")
data("mtcars")
str(mtcars)
plot(mtcars$disp,mtcars$gear)
x <- (mtcars$disp[1:50])
hist(x)
setwd("~/")
options(repos = list(CRAN = "http://cran.rstudio.com/"))
options(digits = 2)
install.packages("pacman")
pacman::p_load(dlookr, # Exploratory data analysis
formattable, # HTML tables from R outputs
here, # Standardizes paths to data
kableExtra, # Alternative to formattable
knitr, # Needed to write HTML reports
missRanger, # To generate NAs
tidyverse) # Powerful data wrangling package suite
install.packages("pacman")
?help
# Declaring variables
name <- "AJ!!"
num <- 12
# Declaring variables
name <- "AJ!!"
num <- 12
num <- 12
# Declaring variables
name <- "AJ!!"
print(num)
print(name)
class(num)
paste("my name is",name)
rm=(list = ls())
rm(list = ls())
print(text1)
text1 <- text2 <- text3 <- "Banunana"
print(text1)
print(text3)
print(new_str)
new_str <- "the power of R"
class(new_str)
print(new_str)
X <- TRUE
y <- FALSE
class(X)
class(y)
num3 <- 99L
class(num3)
new_num <- as.numeric(num3)
class(new_num)
new_com <- as.complex(num3)
class(new_num)
#type conversion
num3 <- 99L
num2 <- 12.9
class(num3)
new_num <- as.numeric(num3)
class(new_num)
new_com <- as.integer(num3)
class(new_num)
new_com <- as.integer(num2)
#type conversion
num3 <- 99L
num2 <- 12.9
class(num3)
new_num <- as.numeric(num3)
class(new_num)
new_com <- as.integer(num2)
class(new_num)
#type conversion
num3 <- 99L
num2 <- 12.9
num1 <- 7i
class(num3)
new_num <- as.numeric(num3)
class(new_num)
new_com <- as.integer(num2)
class(new_num)
new_comp <- as.complex(num2)
class(new_comp)
print(new_comp)
# Get the Data
# Read in with tidytuesdayR package
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest
# Either ISO-8601 date or year/week works!
tuesdata <- tidytuesdayR::tt_load('2023-05-02')
options(repos = list(CRAN = "http://cran.rstudio.com/"))
options(digits = 2)
install.packages("tidytuesdayR")
# Get the Data
# Read in with tidytuesdayR package
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest
# Either ISO-8601 date or year/week works!
tuesdata <- tidytuesdayR::tt_load('2023-05-02')
tuesdata <- tidytuesdayR::tt_load(2023, week = 18)
plots <- tuesdata$plots
species <- tuesdata$species
surveys <- tuesdata$surveys
# Or read in the data manually
plots <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/plots.csv')
species <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/species.csv')
surveys <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/surveys.csv')
dataset |>
head() |>
formattable()
dataset |>
head("2023-05-02") |>
formattable(head("2023-05-02"))
dataset |>
head("2023-05-02") |>
#formattable(head("2023-05-02"))
dataset |>
head("2023-05-02")
dataset |>
head("portalr")
dataset |>
head("Portal Project")
dataset |>
head("tuesdata")
dataset |>
head("plots")
dataset |>
head("plots")
dataset |>
head("plots")
# Get the Data
# Read in with tidytuesdayR package
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest
# Either ISO-8601 date or year/week works!
tuesdata <- tidytuesdayR::tt_load('2023-05-02')
tuesdata <- tidytuesdayR::tt_load(2023, week = 18)
plots <- tuesdata$plots
species <- tuesdata$species
surveys <- tuesdata$surveys
# Or read in the data manually
plots <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/plots.csv')
species <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/species.csv')
surveys <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/surveys.csv')
dataset |>
head("plots")
dataset |>
head("plots")
dataset |>
head("plots") |>
formattable(head("2023-05-02"))
dataset |>
head("plots.csv") |>
formattable(head("plots.csv"))
# Let's load a data set from the diabetes data set
dataset <- read.csv(here("EDA_In_R_Book", "data", "plots.csv")) |>
# What does the data look like?
dataset |>
head() |>
formattable()
# Let's load a data set from the diabetes data set
dataset <- read.csv(here("EDA_In_R_Book", "data", "plots.csv"))
# Let's load a data set from the diabetes data set
dataset <- read.csv("EDA_In_R_Book", "data", "plots.csv")
# Let's load a data set from the diabetes data set
dataset <- read.csv("EDA_In_R_Book", "data", "hw-02-ajinkyapdeshmukh/plots.csv")
# Let's load a data set from the diabetes data set
dataset <- read.csv("EDA_In_R_Book", "data", "hw-02-ajinkyapdeshmukh/plots.csv")
# Let's load a data set from the diabetes data set
dataset <- read.csv("EDA_In_R_Book", "data", "./hw-02-ajinkyapdeshmukh/plots.csv")
# Let's load a data set from the diabetes data set
dataset <- read.csv("plots.csv")
dataset
# What does the data look like?
dataset |>
head() |>
formattable()
# Let's load a data set from the diabetes data set
dataset <- read.csv("plots.csv")
dataset
# What does the data look like?
# Let's load a data set from the diabetes data set
dataset <- read.csv("plots.csv")
dataset
# What does the data look like?
dataset |>
head() |>
formattable()
options(repos = list(CRAN = "http://cran.rstudio.com/"))
# Sets the number of significant figures to two - e.g., 0.01
options(digits = 2)
install.packages("tidytuesdayR")
# Required package for quick package downloading and loading
if (!require(pacman))
install.packages("pacman")
# Downloads and load required packages
pacman::p_load(dlookr, # Exploratory data analysis
forecast, # Needed for Box-Cox transformations
formattable, # HTML tables from R outputs
here, # Standardizes paths to data
kableExtra, # Alternative to formattable
knitr, # Needed to write HTML reports
missRanger, # To generate NAs
tidyverse) # Powerful data wrangling package suite
